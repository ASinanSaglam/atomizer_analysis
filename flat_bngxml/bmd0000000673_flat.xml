<?xml version="1.0" encoding="UTF-8"?>
<!-- Created by BioNetGen 2.6.0  -->
<sbml xmlns="http://www.sbml.org/sbml/level3" level="3" version="1">
  <model id="bmd0000000673_flat">
    <ListOfParameters>
      <Parameter id="S0" type="Constant" value="30" expr="30.0"/>
      <Parameter id="alpha" type="Constant" value="0.0164" expr="0.0164"/>
      <Parameter id="MODEL_TIME" type="Constant" value="1" expr="1.0"/>
      <Parameter id="Beta_P" type="Constant" value="-3" expr="-3.0"/>
      <Parameter id="t_half_eq" type="Constant" value="6" expr="6.0"/>
      <Parameter id="t_half_el" type="Constant" value="7" expr="7.0"/>
      <Parameter id="Beta_A" type="Constant" value="-0.047" expr="-0.047"/>
      <Parameter id="CeA" type="Constant" value="25" expr="25.0"/>
      <Parameter id="ECeA_50" type="Constant" value="21" expr="21.0"/>
      <Parameter id="ECea_U50" type="Constant" value="18" expr="18.0"/>
      <Parameter id="ICea_U50" type="Constant" value="38" expr="38.0"/>
      <Parameter id="MODEL_TYPE" type="Constant" value="3" expr="3.0"/>
      <Parameter id="epsilon" type="Constant" value="0" expr="0"/>
      <Parameter id="ANT_AGONIST_COMBINATION" type="Constant" value="0" expr="0"/>
    </ListOfParameters>
    <ListOfMoleculeTypes>
    </ListOfMoleculeTypes>
    <ListOfCompartments>
      <compartment id="Compartment" spatialDimensions="3" size="1.0"/>
    </ListOfCompartments>
    <ListOfSpecies>
    </ListOfSpecies>
    <ListOfReactionRules>
    </ListOfReactionRules>
    <ListOfObservables>
    </ListOfObservables>
    <ListOfFunctions>
      <Function id="CeA_U">
        <ListOfReferences>
          <Reference name="ANT_AGONIST_COMBINATION" type="Constant"/>
          <Reference name="MODEL_TYPE" type="Constant"/>
        </ListOfReferences>
        <Expression> if((MODEL_TYPE==4),if((ANT_AGONIST_COMBINATION==0),0,if((ANT_AGONIST_COMBINATION==2),0,0)),0) </Expression>
      </Function>
      <Function id="Emax">
        <ListOfReferences>
          <Reference name="MODEL_TYPE" type="Constant"/>
        </ListOfReferences>
        <Expression> if((MODEL_TYPE==2),-4,if((MODEL_TYPE==3),-3,if((MODEL_TYPE==4),-6,0))) </Expression>
      </Function>
      <Function id="ICea_U">
        <ListOfReferences>
          <Reference name="ANT_AGONIST_COMBINATION" type="Constant"/>
          <Reference name="MODEL_TYPE" type="Constant"/>
        </ListOfReferences>
        <Expression> if((MODEL_TYPE==4),if((ANT_AGONIST_COMBINATION==1),0,if((ANT_AGONIST_COMBINATION==2),0,0)),0) </Expression>
      </Function>
      <Function id="n">
        <ListOfReferences>
          <Reference name="MODEL_TYPE" type="Constant"/>
        </ListOfReferences>
        <Expression> if((MODEL_TYPE==3),4,if((MODEL_TYPE==4),3,0)) </Expression>
      </Function>
      <Function id="Model_active_U_Shaped">
        <ListOfReferences>
          <Reference name="ECea_U50" type="Constant"/>
          <Reference name="ICea_U50" type="Constant"/>
          <Reference name="CeA_U" type="Function"/>
          <Reference name="Emax" type="Function"/>
          <Reference name="ICea_U" type="Function"/>
          <Reference name="n" type="Function"/>
        </ListOfReferences>
        <Expression> Emax*(((CeA_U^n)/((CeA_U^n)+(ECea_U50^n)))-((ICea_U^n)/((ICea_U^n)+(ICea_U50^n)))) </Expression>
      </Function>
      <Function id="Kel_P">
        <ListOfReferences>
          <Reference name="t_half_el" type="Constant"/>
        </ListOfReferences>
        <Expression> ln(2)/t_half_el </Expression>
      </Function>
      <Function id="Keq_P">
        <ListOfReferences>
          <Reference name="t_half_eq" type="Constant"/>
        </ListOfReferences>
        <Expression> ln(2)/t_half_eq </Expression>
      </Function>
      <Function id="ADAS_COG_P">
        <ListOfReferences>
          <Reference name="Beta_P" type="Constant"/>
          <Reference name="MODEL_TIME" type="Constant"/>
          <Reference name="Kel_P" type="Function"/>
          <Reference name="Keq_P" type="Function"/>
        </ListOfReferences>
        <Expression> ((Beta_P*Keq_P)*(exp(((-Kel_P)*MODEL_TIME))-exp(((-Keq_P)*MODEL_TIME))))/((-Kel_P)+Keq_P) </Expression>
      </Function>
      <Function id="PD_CeP">
        <ListOfReferences>
          <Reference name="ADAS_COG_P" type="Function"/>
        </ListOfReferences>
        <Expression> ADAS_COG_P </Expression>
      </Function>
      <Function id="Model_Inactive">
        <ListOfReferences>
        </ListOfReferences>
        <Expression> 0 </Expression>
      </Function>
      <Function id="Model_active_Linear">
        <ListOfReferences>
          <Reference name="Beta_A" type="Constant"/>
          <Reference name="CeA" type="Constant"/>
        </ListOfReferences>
        <Expression> Beta_A*CeA </Expression>
      </Function>
      <Function id="Model_active_Hyperbolic">
        <ListOfReferences>
          <Reference name="CeA" type="Constant"/>
          <Reference name="ECeA_50" type="Constant"/>
          <Reference name="Emax" type="Function"/>
        </ListOfReferences>
        <Expression> (CeA*Emax)/(CeA+ECeA_50) </Expression>
      </Function>
      <Function id="Model_active_Sigmoidal">
        <ListOfReferences>
          <Reference name="CeA" type="Constant"/>
          <Reference name="ECeA_50" type="Constant"/>
          <Reference name="Emax" type="Function"/>
          <Reference name="n" type="Function"/>
        </ListOfReferences>
        <Expression> ((CeA^n)*Emax)/((CeA^n)+(ECeA_50^n)) </Expression>
      </Function>
      <Function id="PD_CeA">
        <ListOfReferences>
          <Reference name="MODEL_TYPE" type="Constant"/>
          <Reference name="Model_Inactive" type="Function"/>
          <Reference name="Model_active_Hyperbolic" type="Function"/>
          <Reference name="Model_active_Linear" type="Function"/>
          <Reference name="Model_active_Sigmoidal" type="Function"/>
          <Reference name="Model_active_U_Shaped" type="Function"/>
        </ListOfReferences>
        <Expression> if((MODEL_TYPE==0),Model_Inactive,if((MODEL_TYPE==1),Model_active_Linear,if((MODEL_TYPE==2),Model_active_Hyperbolic,if((MODEL_TYPE==3),Model_active_Sigmoidal,if((MODEL_TYPE==4),Model_active_U_Shaped,0))))) </Expression>
      </Function>
      <Function id="S">
        <ListOfReferences>
          <Reference name="MODEL_TIME" type="Constant"/>
          <Reference name="S0" type="Constant"/>
          <Reference name="alpha" type="Constant"/>
          <Reference name="epsilon" type="Constant"/>
          <Reference name="PD_CeA" type="Function"/>
          <Reference name="PD_CeP" type="Function"/>
        </ListOfReferences>
        <Expression> ((((MODEL_TIME*alpha)+PD_CeA)+PD_CeP)+S0)+epsilon </Expression>
      </Function>
    </ListOfFunctions>
  </model>
</sbml>
