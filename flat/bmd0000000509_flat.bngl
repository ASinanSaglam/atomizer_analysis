###
#@BQM_IS:['http://identifiers.org/biomodels.db/MODEL1401200001', 'http://identifiers.org/biomodels.db/BIOMD0000000509']
#@BQM_IS_DESCRIBED_BY:['http://identifiers.org/pubmed/24434742']
#@BQM_IS_DERIVED_FROM:['http://identifiers.org/pubmed/16055527', 'http://identifiers.org/biomodels.db/BIOMD0000000168']
#@BQB_HAS_PROPERTY:['http://identifiers.org/mamo/MAMO_0000046']
#@BQB_IS_PART_OF:['http://identifiers.org/go/GO:0007049', 'http://identifiers.org/go/GO:0005388']
#@BQB_HAS_TAXON:['http://identifiers.org/taxonomy/40674']
#@creatorEmail:'viji@ebi.ac.uk'
#@creatorName:'Chelliah Vijayalakshmi'
#@notes:'This is a plain translation of an SBML model created on 13/08/2021. The original model has 16 molecules and 0 reactions. The translated model has 8 molecules and 8 rules'
###
begin model
begin parameters
	addash 0.41
	vatp_s 50.0
	smoothness 0.01
	vdeg 2.0
	alpha 0.083
	gamma 1.0
	ae 0.16
	ax 0.08
	k 0.05
	qd 0.6
	qe 0.6
	qx 0.8
	f 0.2
	g 0.528
	ps 0.6
	pd 0.48
	pe 0.096
	px 0.48
	ddd 0.4
	dee 0.2
	dxx 1.04
	af 0.9
	rt 2.5
	yo 1.5
	gf 6.3
	kdeg 0.0625
	kkdeg 50.0
	ka 0.017
	kd 0.15
	rhstar 0.6
	dip 280.0
	krel 10.0
	ip3min 0.012
	datpp 300.0
	kr 25.0
	scale 3600.0
	rscrit 1.0
	ymax 500.0
	cabasil 0.02055236
	p1 0.0159835
	p2 0.514987
	p3 1.31319
	p4 0.332195
	p5 0.787902
	m 24.1946
	n 9.79183
	dist 50.0
	ip30 0.013
end parameters
begin molecule types
	e()
	d()
	r()
	ip3()
	rs()
	y()
	x()
	atp()
end molecule types
begin seed species
	e() 6.022e+23 # 1.0mol/L * 6.022e23/mol *1.0L #e #e
	rs() 6.624200000000001e+23 #original 1.1mol/L #rs #rs
end seed species
begin observables
	Species d d() #d
	Species __e__ e() #e
	Species r r() #r
	Species rs rs() #rs
	Species x x() #x
	Species ip3 ip3() #ip3
	Species atp atp() #atp
	Species y y() #y
end observables
begin functions
	ro_ar() = atp/(atp + kr)
	kg_ar() = kd/ka
	delta_ar() = ip30*kdeg*kg_ar/(-ip30*kdeg + rhstar)
	gstar_ar() = (delta_ar + ro_ar)/(delta_ar + kg_ar + ro_ar)
	ip3con_ar() = tanh(100.0*ip3 - 100.0*ip3min)/2 + 1/2
	rscon_ar() = tanh(-100.0*rs + 100.0*rscrit)/2 + 1/2
	arRatey() = scale*(alpha*(-y + ymax) - ip3con_ar*rscon_ar*vatp_s*(-atp + y)*(ip3 - ip3min)/(ip3 + krel))
	arRateatp() = scale*(-atp*vdeg/(atp + kkdeg) + ip3con_ar*rscon_ar*vatp_s*(-atp + y)*(ip3 - ip3min)/(ip3 + krel))
	arRateip3() = scale*(gstar_ar*rhstar - ip3*kdeg)
	ca_ar() = ip3^m*p2/(ip3^m + p3^m) + ip3^n*p4/(ip3^n + p5^n) + p1
	ad_ar() = addash + gamma*(ca_ar - p1)
	arRated() = -__e__*d*ddd + ad_ar*gf*k/(gf*k + 1)
	arRatex() = __e__*ax + __e__*g*x^2 - dxx*x + f*(-rs + yo)
	arRaters() = -__e__*pe*rs/(__e__ + qe + rs) - d*pd*rs/(d + qd + rs) + ps*r*(-rs + yo)
	arRater() = -ps*r*(-rs + yo) + px*x*(-r - rs + rt)/(qx - r - rs + rt + x)
	arRatee() = -__e__*dee*x + ae*(af*(-rs + yo) + 1)
end functions
begin reaction rules
	0  -> d() arRated #rateLaw
	0  -> e() arRatee #rateLaw
	0  -> r() arRater #rateLaw
	0  -> rs() arRaters #rateLaw
	0  -> x() arRatex #rateLaw
	0  -> ip3() arRateip3 #rateLaw
	0  -> atp() arRateatp #rateLaw
	0  -> y() arRatey #rateLaw
end reaction rules
end model
